package puissance4;
import java.util.Scanner;
import java.util.Random;

public class projet {

    public static int[][] grille = new int[6][7];
    
    
    public static void initialiseGrille() { //met toutes les valeurs de la grille de jeu à 0 
        for(int i=0 ; i<grille.length ; i++) {
            for(int j=0 ; j<grille[0].length ; j++) {
                grille[i][j] = 0;
            }
        }
    }
    
//chercher dans la colonne correspondante dans grille, la premiere case contenant la valeur "0"
//puis de changer cette valeur en la valeur du joueur
    public static void jouer (int joueur, int colonne) {
        boolean vide = false;
        while(!vide) { //jusqu'à ce qu'on trouve une case vide
	        for (int i=0; i<grille.length; i++) {
	            if (!vide && grille[i][colonne] == 0) { 
		            grille[i][colonne] = joueur; 
		            vide = true;
	            }
	        }
	        if(!vide) { //si l'on a pas trouvé de case vide dans cette colonne, on redemande un colonne à l'utilisateur
		        System.out.println("La colonne est pleine, choisissez en une autre");
		        Scanner sc = new Scanner(System.in);
		        colonne = sc.nextInt();
	        }
        }
    }
    
    //affiche la Grille de jeu
    public static void afficheGrille () {
        for (int i = 0; i < grille.length; i++) {
            System.out.print("|"); //affiche | avant chaque case
                for (int j=0; j<grille[0].length; j++) { //lis par ligne
                    if (grille[5-i][j] == 2) { //Si c'est une valeur du joueur 2 on affiche 0
                        System.out.print("O");
                    }
                    else if (grille[5-i][j] == 1) { //Si c'est une valeur du joueur 1 on affiche X
                        System.out.print("X");
                    }
                    else { //Si c'est une autre valeur (0) on affiche un espace
                        System.out.print(" ");
                    }
                    System.out.print("|"); //affiche | après chaque case
                }
                System.out.print("\n");
        }
        System.out.print(" 0 1 2 3 4 5 6"); //On affiche le numéro des colonnes
        
    }
    
    //Verifie si le joueur à gagné en position horizontale
    public static boolean aGagneHor(int y, int x, int joueur) {
    	if (joueur != grille[y][x]) return false; //si la case que l'on verifie ne contient pas un jeton du joueur, il n'y aura pas de ligne
        boolean FinDroite = false;
        boolean FinGauche = false;
        int cpt = 0; //compteur de cases d'affilé avec le jeton du joueur
        for (int i = 1; i<=3; i++) { //on verifie 3 pièce autour du jeton max
            if ( x+i <= 6) { //On ne verfie pas plus loin que la 6ème ligne
                if (!FinDroite && grille[y][x+i] == joueur) { //Si le jeton de droite est similaire à celui du joueur...
                    cpt++; //le compteur de jeton augmente
                }
                else {
                    FinDroite = true; //sinon on notifie qu'on a atteinds la limite
                }
            }
            if (x-i >= 0) { //on verifie alors a gauche du 1er jeton
                if (!FinGauche && grille[y][x-i] == joueur) {
                    cpt++; //on utilise toujours le même compteur
                }
                else {
                    FinGauche = true;
            }
                }
        }
        return cpt == 3; //si le compteur est égal à 3, on a une ligne complète
    }
    
    //Verifie si le joueur à gagné en position verticale
    public static boolean aGagneVer(int y, int x, int joueur) {
    	if (joueur != grille[y][x]) return false;
        boolean FinHaut = false;
        boolean FinBas = false;
        int cpt = 0;
        for (int i = 1; i<=3; i++) {
            if (y+i <= 5) {
                if (!FinHaut && grille[y+i][x] == joueur) { // On augmente le y à la place du i (par rapport à l'horizontale)
                    cpt++;
                }
                else {
                    FinHaut = true;
                }
            }
            if (y-i >=0) {
                if (!FinBas && grille[y-i][x] == joueur) { // On décrémente le y à la place du i (par rapport à l'horizontale)
                    cpt++;
                }
                else {
                    FinBas = true;
            }
                }
        } return cpt == 3;
    }
    
    //Verifie si le joueur à gagné en position Diagonale haut/bas gauche/droite
    public static boolean aGagneDiagMont(int y, int x, int joueur) {
    	if (joueur != grille[y][x]) return false; //ne vérifie que les cases du joueurs actuel
        boolean FinHaut = false;
        boolean FinBas = false;
        int cpt = 0;
        for (int i = 1; i<=3; i++) {
            if (y-i >= 0 && x+i <= 6) { //on doit verifier sur les 2 axes si l'on est pas out of bounds
                if (!FinHaut && grille[y-i][x+i] == joueur) { //car l'on augmente ou décrémente sur les 2 axes
                	cpt++;
                }
                else {
                    FinHaut = true;
                }
            }
            if (y+i <= 5 && x-i >= 0) { //on doit verifier sur les 2 axes si l'on est pas OOB
                if (!FinBas && grille[y+i][x-i] == joueur) { //car l'on augmente ou décrémente sur les 2 axes
                    cpt++;
                }
                else {
                    FinBas = true;
            }
                }
        } return cpt == 3;
    }
    
    //Verifie si le joueur à gagné en position Diagonale bas/haut Droite/gauche, très similaire à la diagonale montante
    public static boolean aGagneDiagDesc(int y, int x, int joueur) {
    	if (joueur != grille[y][x]) return false;
        boolean FinHaut = false;
        boolean FinBas = false;
        int cpt = 0;
        for (int i = 1; i<=3; i++) {
            if (y+i <= 5 && x+i <= 6) {
                if (!FinBas && grille[y+i][x+i] == joueur) {
                	cpt++;
                }
                else {
                    FinBas = true;
                }
            }
            if (y-i >= 0 && x-i >= 0) {
                if (!FinHaut && grille[y-i][x-i] == joueur) {
                    cpt++;
                }
                else {
                    FinHaut = true;
            }
                }
        } return cpt == 3;
    }
    
    //Verifie si un joueur à gagné sur n'importe quel axe
    public static boolean aGagne (int joueur) {
    	boolean gagne = false;
    	for(int y=0; y< grille.length;y++) {
    		for(int x=0; x< grille[y].length;x++) {
    			if(!gagne && aGagneHor(y ,x, joueur) || aGagneVer(y ,x, joueur) || aGagneDiagMont(y ,x, joueur) || aGagneDiagDesc(y ,x, joueur)) {
    				gagne = true;
    			}
    		}
    	} return gagne;
    }
    
    public static boolean matchNul () {
    	boolean plein = false;
    	for(int y=0; y< grille.length;y++) {
    		for(int x=0; x< grille[y].length;x++) {
    			if(!plein && grille[y][x] == 0) {
    				plein = true;
    			}
    		}
    	} return plein;
    }
 
    
    public static int colonneJoué (int joueur) {
    	afficheGrille();
        System.out.print("\n");
        System.out.print("Quel coup pour le joueur " + joueur + " ?");
        Scanner scanner = new Scanner(System.in);
        int c = scanner.nextInt();
        return c;
    }
    
    public static void jeu (int IA, int difIA) {
    	initialiseGrille();
    	int joueur = 1;
    	int colonne = 0;
    	while(!aGagne(3-joueur) || !matchNul()) {
    		if(IA == 0) {
    			colonne = colonneJoué(joueur);
    			jouer(joueur, colonne);
    			joueur = 3 - joueur;
    		}
    		else if(IA == 1) {
    			if(joueur == 1) {
	    			colonne = colonneJoué(joueur);
	        		jouer(joueur, colonne);
	        		joueur = 3 -joueur;
    			}
    			else {
    				if(difIA == 1) {
	    				joueCoupRandom();
	    				joueur = 3 - joueur;
	    				}
    				else if(difIA == 2) {
    					joueCoupRandom2();
    					joueur = 3 - joueur;
    				}
    				else if(difIA == 3) {
    					joueCoupRandom3();
    					joueur = 3 - joueur;
    				}
    				
    			}
    		}
    	}
    	
    	if (!matchNul()) {
    		System.out.print("Match nul");
    	}
    	else {
    		if(IA == 0) {
    			int joueurGagnant = 3 - joueur;
    			afficheGrille();
        		System.out.print("\n");
        		System.out.print("Le joueur numéro " + joueurGagnant + " à gagné la partie de jeu");
    		}
    		else {
    			int joueurGagnant = 3 - joueur;
    			if(joueurGagnant == 2) {
    				afficheGrille();
    				System.out.println("L'IA a gagné la partie de jeu");
    			}
    			else {
    				afficheGrille();
    				System.out.println("Vous avez gagner contre l'ordinateur");
    			}
    		}
    	}
    }
    
    //IA
    public static void joueCoupRandom () {
    	Random random = new Random();
        int colonne = random.nextInt(7);
        jouer(2, colonne);
    }
    
    public static int choixColonneGagnante () {  //tester aGagne sur toute les colonnes, si le coup lui fait gagner, poser la piece (sauvegarde le tab)
    		for (int i=0; i<grille.length; i++) {
        		for(int j=0; j < grille.length; j++) {
		            if (grille[i][j] == 0) { 
		            	 grille[i][j] = 2; 
		            	if(aGagne(2)) {
		            		grille[i][j] = 0; 
		        			return j;
			            }
		            	else {
		            		grille[i][j] = 0; 
		            		
		            	}
		            }
        		}
	        
        } return -1;    
    }
    
    public static int[] Empeche () {
    	int[]tab = new int[6];
    	int cpt = 0;
    	
 		for (int i=0; i<grille.length; i++) {
     		int vide = TrouveCaseVide(i, grille);
     		grille[i][vide]= 2;
     		for (int j=0; j<grille.length; j++) {
     			int vide2 = TrouveCaseVide(j, grille);
     			grille[j][vide2] = 1;
     			if(aGagne(1)) {
     				tab[cpt] = j;
     				grille[j][vide2] = 0;
     				grille[i][vide]= 0;
     				cpt++;
     			}
     			else {
     				grille[j][vide2] = 0;
     				grille[i][vide]= 0;
     			}
     		}
     		
     		
	        
 		} return tab;
    }
    
    public static void joueCoupRandom2 () {
    	Random random = new Random();
    	int c = choixColonneGagnante();
    	if(c >= 0) {
    		jouer(2, c);
    	}
    	else if(c == -1) {
    		int randomc = random.nextInt(7);
    		jouer(2, randomc);
    	}
        
    }
    
    public static int TrouveCaseVide (int colonne, int[][]grille2) {
    	int tab = 0;
    	boolean vide = false;
    	while(!vide) { //jusqu'à ce qu'on trouve une case vide
	        for (int i=0; i<grille2.length; i++) {
	            if (!vide && grille2[i][colonne] == 0) { 
		            tab = i;
		            vide = true;
	            }
	        }
    	} return tab;
    }
    
    public static void joueCoupRandom3 () {
    	Random random = new Random();
    	int randomc = random.nextInt(7);
    	int[] tab = Empeche();
    	for(int i = 0; i< tab.length; i++) {
    		if(tab[i] != randomc) {
    			randomc = random.nextInt(7);
    		}
    	}
    	jouer(2, randomc);
        
    }
    
    public static void main (String[] args) {
    	int difIA = 0;
    	System.out.println("Voulez vous jouer contre l'IA ? 0/N 1/Y");
    	Scanner sc = new Scanner(System.in);
    	int IA = sc.nextInt();
    	if (IA == 1) {
    		System.out.println("Quelle difficulté voulez vous pour l'IA ? 1/2/3");
        	Scanner scanner = new Scanner(System.in);
        	difIA = scanner.nextInt();
    	}
    	jeu(IA,difIA);
    	sc.close();
    	}
    
}
